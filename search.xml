<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[长期更新]算法总结</title>
      <link href="/article/dba7e729.html"/>
      <url>/article/dba7e729.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从力扣100题开始的算法总结，决定真正走科班的代码之路后，果然还是得彻底从头开始总结一些算法代码了，感觉会是一个长期的总结过程，而且还要保持长期热情，只能加油吧。之前技能点全点在做游戏上了，但如果真的决定要改变世界，那就不能止步不前了。</p><p>这个总结目前来说还比较简单片面，后续可能考虑针对各个算法进行单一深入应用总结。</p><p><img src="/article/dba7e729/wallhaven-5g22q5_1920x1080.png" alt="wallhaven-5g22q5_1920x1080"></p><h1 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h1><p>这一部分其实主要是利用哈希表来辅助解决问题。</p><p>可能困难比较大的是<strong>记住哈希表的使用方式</strong>（呃呃这就是记性差的坏处了）</p><p>记住之后很多问题在考虑到查找、拼接就可以直接从哈希表入手了：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">unordered_map&lt;string, vector&lt;string&gt;&gt; groups;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = groups.<span class="built_in">begin</span>(); it != groups.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">    ans.<span class="built_in">emplace_back</span>(it-&gt;second);           <span class="comment">// 每一组键值对的值加入结果中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">st</span><span class="params">(nums.begin(), nums.end())</span></span>; <span class="comment">// 把 nums 转成哈希集合</span></span><br><span class="line">st.<span class="built_in">contains</span>(x - <span class="number">1</span>); <span class="comment">// 哈希判断条件</span></span><br></pre></td></tr></table></figure><p>经典题目链接：</p><p><a href="https://leetcode.cn/problems/group-anagrams/?envType=study-plan-v2&envId=top-100-liked">49. 字母异位词分组 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/longest-consecutive-sequence/?envType=study-plan-v2&envId=top-100-liked">128. 最长连续序列 - 力扣（LeetCode）</a></p><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><p>双指针题目比较灵活，可以有以下两类（目前）：</p><ol><li>指针同时出发，主要挪动一个指针，满足特定条件再挪动另一个指针</li><li>指针同时出发，但是位于数列两端，进行比较选择挪动的指针</li></ol><p>代表性题目分别有：</p><p><a href="https://leetcode.cn/problems/move-zeroes/?envType=study-plan-v2&envId=top-100-liked">283. 移动零 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/trapping-rain-water/?envType=study-plan-v2&envId=top-100-liked">42. 接雨水 - 力扣（LeetCode）</a></p><h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><p>先附上比较玄妙的一道题：</p><p><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/?envType=study-plan-v2&envId=top-100-liked">438. 找到字符串中所有字母异位词 - 力扣（LeetCode）</a></p><p>这个的话比较字面意思，有点像双指针，主要通过动态调节窗口大小，来满足特定条件</p><p>主要操作是拓展窗口、缩减窗口、比较、选择。</p><p>然后可能会和子串在一起。</p><h1 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h1><h1 id="普通数组"><a href="#普通数组" class="headerlink" title="普通数组"></a>普通数组</h1><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>奇妙的题目：<a href="https://leetcode.cn/problems/linked-list-cycle-ii/solutions/12616/linked-list-cycle-ii-kuai-man-zhi-zhen-shuang-zhi-/?envType=study-plan-v2&envId=top-100-liked">142. 环形链表 II - 力扣（LeetCode）</a></p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><p>主要是有一个标准的板子</p><p>在此记录一下（其实感觉不是很难）</p><p>题目出处：<a href="https://leetcode.cn/problems/permutations/description/?envType=study-plan-v2&envId=top-100-liked">46. 全排列 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">bool</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[i] == <span class="literal">true</span>)   <span class="comment">//如果该元素被使用过了，则直接跳过</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            used[i] = <span class="literal">true</span>;        <span class="comment">//下面要用，先标记上已使用</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();       <span class="comment">//回溯path和used，即将本层的处理全部Ctrl + Z(撤销~~)</span></span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">used</span><span class="params">(nums.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>还有感觉时不时可以回忆一下n皇后：<a href="https://leetcode.cn/problems/n-queens/?envType=study-plan-v2&envId=top-100-liked">51. N 皇后 - 力扣（LeetCode）</a></p><p>把**行（row）**视为回溯推进的路标！</p><p>感觉重要的就是路标的标定和查找。</p><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>感觉是因为自己有一个很笨笨的方法，导致写的每次逻辑都非常不通畅。</p><p>因此在此记录下两者区别：</p><p>题目出处：<a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/solutions/698479/xun-zhao-xuan-zhuan-pai-xu-shu-zu-zhong-5irwp/?envType=study-plan-v2&envId=top-100-liked">153. 寻找旋转排序数组中的最小值 - 力扣（LeetCode）</a></p><p>官方题解：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> pivot = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[pivot] &lt; nums[high]) &#123;</span><br><span class="line">                high = pivot;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                low = pivot + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[low];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/find-minimum-in-rotated-sorted-array/solutions/698479/xun-zhao-xuan-zhuan-pai-xu-shu-zu-zhong-5irwp/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>我的铸币理解：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>,nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> left,<span class="type">int</span> right,vector&lt;<span class="type">int</span>&gt; nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(left == right<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[right] &gt; nums[left] ? nums[left] : nums[right];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;nums[left])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">find</span>(left,mid,nums);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;nums[right])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">find</span>(mid,right,nums);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[left];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p>嘶……</p><p>大部分贪心都被我用dp过去了……</p><p>不过这道倒是dp没想出来:</p><p><a href="https://leetcode.cn/problems/jump-game-ii/?envType=study-plan-v2&envId=top-100-liked">45. 跳跃游戏 II - 力扣（LeetCode）</a></p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>感觉没有想象中的那么恐怖，其实就是要找到一条可以表示所有情况的通式。</p><p>接着找到他的初状态就可以了。</p><p>最好是要常备草稿纸！</p><h1 id="多维动态规划"><a href="#多维动态规划" class="headerlink" title="多维动态规划"></a>多维动态规划</h1><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习ing </tag>
            
            <tag> 哈希 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 滑动窗口 </tag>
            
            <tag> 子串 </tag>
            
            <tag> 普通数组 </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 回溯 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 堆 </tag>
            
            <tag> 贪心算法 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 多维动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客迁移备忘录</title>
      <link href="/article/9312db38.html"/>
      <url>/article/9312db38.html</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这是一篇日后换电脑时备忘的博客，主要是关于hexo的迁移的。</p><h1 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h1><p>首先是安装nodejs，链接如下：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>然后是关于nodejs的配置路径问题：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\node\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\node\node_cache</span></span><br></pre></td></tr></table></figure><p>以及镜像：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>最近想起来一件事，好像还得把所有安装的包给安装回来……</p><p>使用指令查看了下，依赖的包大概如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Administrator@PC-202207261451 MINGW64 /f/Hexo/My-Web (main)</span><br><span class="line">$ npm <span class="built_in">ls</span> -g --depth=0</span><br><span class="line">F:\node\node_global</span><br><span class="line">└── hexo-cli@4.3.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Administrator@PC-202207261451 MINGW64 /f/Hexo/My-Web (main)</span><br><span class="line">$ npm list --depth=0</span><br><span class="line">hexo-site@0.0.0 F:\Hexo\My-Web</span><br><span class="line">├── hexo-abbrlink@2.2.1</span><br><span class="line">├── hexo-asset-img@1.2.0</span><br><span class="line">├── hexo-deployer-git@4.0.0</span><br><span class="line">├── hexo-generator-archive@2.0.0</span><br><span class="line">├── hexo-generator-category@2.0.0</span><br><span class="line">├── hexo-generator-index@4.0.0</span><br><span class="line">├── hexo-generator-search@2.4.3</span><br><span class="line">├── hexo-generator-tag@2.0.0</span><br><span class="line">├── hexo-helper-live2d@3.1.1</span><br><span class="line">├── hexo-renderer-ejs@2.0.0</span><br><span class="line">├── hexo-renderer-marked@7.0.1</span><br><span class="line">├── hexo-renderer-pug@3.0.0</span><br><span class="line">├── hexo-renderer-stylus@3.0.1</span><br><span class="line">├── hexo-server@3.0.0</span><br><span class="line">├── hexo-theme-butterfly@5.3.5</span><br><span class="line">├── hexo-theme-landscape@1.1.0</span><br><span class="line">├── hexo-wordcount@6.0.1</span><br><span class="line">├── hexo@7.3.0</span><br><span class="line">└── live2d-widget-model-tororo@1.0.5</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="拉取博客主站"><a href="#拉取博客主站" class="headerlink" title="拉取博客主站"></a>拉取博客主站</h1><p>这个配置完后，拉一下自己的博客官网进行迁移：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull 这个就不给看了</span><br></pre></td></tr></table></figure><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>然后有比较好的一些教程，先记录一下，都是建站时候的参考：</p><p><a href="https://blog.csdn.net/m0_74795952/article/details/146370818?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-5-146370818-blog-129290903.235%5Ev43%5Epc_blog_bottom_relevance_base7&spm=1001.2101.3001.4242.4&utm_relevant_index=8">基础美化教程</a></p><p><a href="https://blog.anheyu.com/posts/52d8.html">过渡动画</a></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>最后防止自己忘了 补充下hexo的语法：</p><p>hexo三连起手：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>创建博客:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new 博客名称</span><br></pre></td></tr></table></figure><p>创建页面：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page 页面</span><br></pre></td></tr></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ol><li><p>封面图片</p><p>补充一下封面图片的用法：</p><p>因为每次文章都会由插件生成一个唯一标识码，根据唯一标识码可以找到对应post的图片目录，比如本post的目录就为:<a href="http://aplainjane.github.io/article/9312db38">http://aplainjane.github.io/article/9312db38</a></p><p>然后由于修改了typora，每次插入图片会复制图片到该博客目录下的同名文件夹，所以最后生成的时候会把图片塞到对应article的目录下，故封面的图片设置就可以设置为：</p><p>top_img: <a href="http://aplainjane.github.io/article/9312db38/wallhaven-d69eom_1920x1080.png">http://aplainjane.github.io/article/9312db38/wallhaven-d69eom_1920x1080.png</a></p><p>cover: <a href="http://aplainjane.github.io/article/9312db38/wallhaven-d69eom_1920x1080.png">http://aplainjane.github.io/article/9312db38/wallhaven-d69eom_1920x1080.png</a></p></li><li><p>内嵌图片</p><p>由于已经修改typora内置参数，因此只需要将typora的图片路径修改为：博客名称&#x2F;图片名称</p><p>即可</p></li></ol><p>大概这样，最后再附张美图吧，以后哪里迁移出问题了再回来看看和补充</p><p><img src="/article/9312db38/wallhaven-d69eom_1920x1080.png" alt="wallhaven-d69eom_1920x1080"></p>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/article/4a17b156.html"/>
      <url>/article/4a17b156.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>你好呀！</p><p>这里是aplainjane的博客，是漂泊了一阵子后想要给自己留下一些足迹的地方。</p><p>之前一直都没有好好留存技术博客和项目介绍的好习惯，</p><p>但是从现在开始也不算迟嘛！</p><p>无论如何对着世界喊出一声“hello world!”</p><p>世界都会给你它最热烈的回应。</p><p>此刻就是好好经营自己，经营生活的最佳时刻！</p><p>所以</p><p>你好，世界！</p><p>后续会陆陆续续把做过的一些项目和文档都搬运过来，嘿嘿。</p><p>希望能一直坚持下去吧！</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
